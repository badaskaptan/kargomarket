import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React from 'react';
import { Truck, Ship, Plane, Train } from 'lucide-react';
const TransportServiceDetailSection = ({ listing }) => {
    const { metadata } = listing;
    const transportDetails = metadata?.transport_details || {};
    const contactInfo = metadata?.contact_info || {};
    const requiredDocuments = metadata?.required_documents || [];
    // Ara√ß tipi √ßevirisi i√ßin mapping fonksiyonu
    function getVehicleTypeLabel(vehicleCode) {
        const vehicleTypes = {
            // Karayolu ara√ßlarƒ±
            'truck_3_5_open': 'üöö Kamyonet A√ßƒ±k (3.5 ton)',
            'truck_3_5_closed': 'üöö Kamyonet Kapalƒ± (3.5 ton)',
            'truck_7_5': 'üöõ Kamyon (7.5 ton)',
            'truck_10': 'üöõ Kamyon (10 ton)',
            'truck_15': 'üöõ Kamyon (15 ton)',
            'truck_20': 'üöõ Kamyon (20 ton)',
            'truck_24': 'üöõ Kamyon (24 ton)',
            'truck_27': 'üöõ Kamyon (27 ton)',
            'truck_30': 'üöõ Kamyon (30 ton)',
            'truck_40': 'üöõ Kamyon (40 ton)',
            'tir': 'üöõ Tƒ±r',
            'tir_lowbed': 'üöõ Tƒ±r Lowbed',
            'tir_mega': 'üöõ Tƒ±r Mega',
            'tir_jumbo': 'üöõ Tƒ±r Jumbo',
            'tir_frigo': '‚ùÑÔ∏è Tƒ±r Frigo',
            'tir_tanker': 'üõ¢Ô∏è Tƒ±r Tanker',
            'tir_container': 'üì¶ Tƒ±r Konteyner',
            'van': 'üöê Van',
            'pickup': 'üõª Pickup',
            'refrigerated': '‚ùÑÔ∏è Soƒüutuculu Ara√ß',
            'flatbed': 'üöõ A√ßƒ±k Platform',
            'box_truck': 'üì¶ Kapalƒ± Kasa',
            'tanker_truck': 'üõ¢Ô∏è Tanker Kamyon',
            'car_carrier': 'üöó Ara√ß Ta≈üƒ±yƒ±cƒ±',
            'livestock_carrier': 'üêÑ Canlƒ± Hayvan Ta≈üƒ±yƒ±cƒ±',
            
            // Denizyolu ara√ßlarƒ±
            'container_20': 'üì¶ 20ft Konteyner',
            'container_40': 'üì¶ 40ft Konteyner',
            'container_40hc': 'üì¶ 40ft HC Konteyner',
            'container_45': 'üì¶ 45ft Konteyner',
            'container_20rf': '‚ùÑÔ∏è 20ft Reefer Konteyner',
            'container_40rf': '‚ùÑÔ∏è 40ft Reefer Konteyner',
            'container_20ot': 'üì¶ 20ft Open Top Konteyner',
            'container_40ot': 'üì¶ 40ft Open Top Konteyner',
            'container_20fr': 'üì¶ 20ft Flat Rack Konteyner',
            'container_40fr': 'üì¶ 40ft Flat Rack Konteyner',
            'bulk_carrier': 'üö¢ D√∂kme Y√ºk Gemisi',
            'general_cargo': 'üö¢ Genel Kargo Gemisi',
            'tanker_ship': 'üõ¢Ô∏è Tanker Gemisi',
            'ro_ro': 'üö¢ Ro-Ro Gemisi',
            'ferry': '‚õ¥Ô∏è Feribot',
            'barge': 'üö¢ Mavna',
            'breakbulk': 'üì¶ Par√ßa Y√ºk Gemisi',
            'heavy_lift': 'üèóÔ∏è Aƒüƒ±r Kaldƒ±rma Gemisi',
            'project_cargo': 'üö¢ Proje Y√ºk√º Gemisi',
            
            // Havayolu ara√ßlarƒ±
            'air_cargo': '‚úàÔ∏è Hava Kargo',
            'air_express': '‚úàÔ∏è Hava Ekspres',
            'air_charter': '‚úàÔ∏è Charter U√ßak',
            'air_passenger': '‚úàÔ∏è Yolcu U√ßaƒüƒ±',
            'air_freighter': '‚úàÔ∏è Kargo U√ßaƒüƒ±',
            'helicopter': 'üöÅ Helikopter',
            
            // Demiryolu ara√ßlarƒ±
            'container_wagon': 'üöÇ Konteyner Vagonu',
            'flatcar': 'üöÇ D√ºz Vagon',
            'boxcar': 'üöÇ Kapalƒ± Vagon',
            'tanker_wagon': 'üöÇ Tanker Vagonu',
            'hopper_wagon': 'üöÇ Bunker Vagonu',
            'refrigerated_wagon': '‚ùÑÔ∏è Soƒüutuculu Vagon',
            'livestock_wagon': 'üêÑ Hayvan Vagonu',
            'automobile_wagon': 'üöó Otomobil Vagonu',
            'timber_wagon': 'üå≤ Kereste Vagonu',
            'coal_wagon': '‚ö´ K√∂m√ºr Vagonu',
            'grain_wagon': 'üåæ Tahƒ±l Vagonu',
            'chemical_wagon': '‚öóÔ∏è Kimyasal Vagon',
            'open_wagon': 'üöÇ A√ßƒ±k Y√ºk Vagonu',
            'covered_wagon': 'üöÇ Kapalƒ± Y√ºk Vagonu',
            'special_wagon': 'üöÇ √ñzel Ama√ßlƒ± Vagon',
            
            // Diƒüer
            'large_cargo': 'üì¶ B√ºy√ºk Kargo',
            'oversized': 'üìè Geni≈ü/Uzun Y√ºk',
            'dangerous_goods': '‚ö†Ô∏è Tehlikeli Madde',
            'perishable': 'ü•¨ Bozulabilir √úr√ºn',
            'fragile': 'üîç Kƒ±rƒ±labilir',
            'valuable': 'üíé Deƒüerli E≈üya',
            'live_animals': 'üêæ Canlƒ± Hayvan',
            'vehicles': 'üöó Ara√ß',
            'machinery': '‚öôÔ∏è Makine/Ekipman',
            'construction': 'üèóÔ∏è ƒ∞n≈üaat Malzemesi'
        };
        
        return vehicleTypes[vehicleCode] || vehicleCode;
    }
    
    // Tarih formatlama fonksiyonu (YYYY-MM-DD -> DD-MM-YYYY)
    function formatDate(dateString) {
        if (!dateString) return 'Belirtilmemi≈ü';
        
        // Eƒüer tarih YYYY-MM-DD formatƒ±ndaysa, DD-MM-YYYY'ye √ßevir
        const datePattern = /^(\d{4})-(\d{2})-(\d{2})$/;
        const match = dateString.match(datePattern);
        
        if (match) {
            const [, year, month, day] = match;
            return `${day}-${month}-${year}`;
        }
        
        // Eƒüer farklƒ± bir formatta gelirse, olduƒüu gibi d√∂nd√ºr
        return dateString;
    }

    // Ta≈üƒ±ma moduna g√∂re ikon ve T√ºrk√ße metin
    function getTransportModeDisplay(mode) {
        switch (mode) {
            case 'road':
                return _jsxs("span", { className: "flex items-center gap-2 font-semibold text-yellow-700", children: [_jsx(Truck, { className: "w-6 h-6 text-yellow-500" }), "Karayolu"] });
            case 'sea':
                return _jsxs("span", { className: "flex items-center gap-2 font-semibold text-blue-700", children: [_jsx(Ship, { className: "w-6 h-6 text-blue-500" }), "Denizyolu"] });
            case 'air':
                return _jsxs("span", { className: "flex items-center gap-2 font-semibold text-cyan-700", children: [_jsx(Plane, { className: "w-6 h-6 text-cyan-500" }), "Havayolu"] });
            case 'rail':
                return _jsxs("span", { className: "flex items-center gap-2 font-semibold text-gray-700", children: [_jsx(Train, { className: "w-6 h-6 text-gray-500" }), "Demiryolu"] });
            default:
                return _jsx("span", { className: "text-gray-500", children: "Bilinmiyor" });
        }
    }
    return (_jsxs("div", { className: "rounded-3xl shadow-lg p-8 bg-white border border-gray-200 space-y-6", children: [_jsxs("div", { className: "flex items-center space-x-4 mb-4", children: [_jsx("span", { className: "text-lg font-bold text-gray-900", children: listing.listing_number }), _jsx("span", { className: "text-xl font-bold text-gray-900", children: listing.title }), _jsx("span", { className: "ml-auto px-4 py-2 rounded-full bg-green-100 text-green-700 text-xs font-semibold", children: listing.status })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "A\u00E7\u0131klama" }), _jsx("div", { className: "text-gray-800 mb-2", children: listing.description })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Ta\u015F\u0131ma Modu" }), _jsx("div", { className: "mb-2", children: getTransportModeDisplay(listing.transport_mode) })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Kalk\u0131\u015F B\u00F6lgesi" }), _jsx("div", { className: "text-gray-800 mb-2", children: listing.origin })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Var\u0131\u015F B\u00F6lgesi" }), _jsx("div", { className: "text-gray-800 mb-2", children: listing.destination })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Ara\u00E7 Tipi" }), _jsx("div", { className: "text-gray-800 mb-2", children: listing.vehicle_types ? listing.vehicle_types.map(vehicleCode => getVehicleTypeLabel(vehicleCode)).join(', ') : 'Belirtilmemi≈ü' })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Kapasite" }), _jsx("div", { className: "text-gray-800 mb-2", children: listing.capacity })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Bo\u015Fta Olma Tarihi" }), _jsx("div", { className: "text-gray-800 mb-2", children: formatDate(listing.available_from_date) })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "\u0130leti\u015Fim Bilgileri" }), _jsx("div", { className: "text-gray-800 mb-2", children: contactInfo?.contact }), contactInfo?.company_name && (_jsxs("div", { className: "text-gray-600 text-xs", children: ["Firma: ", contactInfo?.company_name] }))] }), listing.transport_mode === 'road' && (_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Plaka / \u015Easi No" }), transportDetails?.plate_number && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["Plaka/\u015Easi: ", transportDetails.plate_number] }))] })), listing.transport_mode === 'sea' && (_jsxs(_Fragment, { children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Gemi Ad\u0131" }), transportDetails?.ship_name && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["Gemi Ad\u0131: ", transportDetails.ship_name] }))] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "IMO No" }), transportDetails?.imo_number && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["IMO No: ", transportDetails.imo_number] }))] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "MMSI No" }), transportDetails?.mmsi_number && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["MMSI No: ", transportDetails.mmsi_number] }))] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "DWT / Tonaj" }), transportDetails?.dwt && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["DWT/Tonaj: ", transportDetails.dwt] }))] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Boyutlar" }), transportDetails?.ship_dimensions && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["Boyutlar: ", transportDetails.ship_dimensions] }))] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Laycan Ba\u015Flang\u0131\u00E7" }), transportDetails?.laycan_start && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["Laycan Ba\u015Flang\u0131\u00E7: ", transportDetails.laycan_start] }))] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Laycan Biti\u015F" }), transportDetails?.laycan_end && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["Laycan Biti\u015F: ", transportDetails.laycan_end] }))] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Navlun Tipi" }), transportDetails?.freight_type && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["Navlun Tipi: ", transportDetails.freight_type] }))] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Charterer / Broker" }), transportDetails?.charterer_info && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["Charterer/Broker: ", transportDetails.charterer_info] }))] })] })), listing.transport_mode === 'air' && (_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "U\u00E7u\u015F Numaras\u0131" }), transportDetails?.flight_number && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["U\u00E7u\u015F Numaras\u0131: ", transportDetails.flight_number] }))] })), listing.transport_mode === 'rail' && (_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Tren/Kompozisyon No" }), transportDetails?.train_number && (_jsxs("div", { className: "text-gray-800 mb-2", children: ["Tren/Kompozisyon No: ", transportDetails.train_number] }))] }))] }), requiredDocuments?.length > 0 && (_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Gerekli Evraklar" }), _jsx("div", { className: "text-gray-800 mb-2", children: requiredDocuments.join(', ') })] }))] }));
};
export default TransportServiceDetailSection;
